---
```{r echo = FALSE, message=FALSE, warning=FALSE}
library(ggplot2)
```
## Overview
In this project we will investigate the exponential distribution in R and compare it with the Central Limit Theorem (CLT).
The exponential distribution can be simulated in R with the `rexp(n, lambda)` function where lambda $\lambda$ represents the rate parameter. The mean of an exponential distribution is $\mu = \frac{1}{\lambda}$ and the standard deviation is $\sigma = \frac{1}{\lambda}$.
According the CLT if a sample consists of at least 30 independent observations and the data are not strongly skewed, then the distribution of the sample mean, the sampling distribution, is well approximated by a normal model which expressed in mathematical notation is: $\bar{x}_{n}$ ~ $N(\mu, \frac{\sigma }{\sqrt{n}})$.
In general, a sampling distribution represents the distribution of the point estimates based on samples of a fixed size from a certain population. It is useful to think of a particular point estimate as being drawn from such a distribution.
In this analysis we will show that the sampling distribution of the mean of an exponential distribution with $n = 40$ observations and $\lambda = 0.2$ is indeed approximately $N(\frac{1}{0.2}, \frac{\frac{1}{0.2}}{\sqrt{40}})$ distributed.
## Comparison of the sample mean and the theoretical mean of the distribution
In the following we will draw 1000 samples of size 40 from an $Exp(\frac{1}{0.2}, \frac{1}{0.2})$ distribution. For each of the 1000 samples we will calculate the mean. Theoretically, this the same as drawing a single sample of size 1000 from the corresponding sampling distribution with $N(\frac{1}{0.2}, \frac{\frac{1}{0.2}}{\sqrt{40}})$.
According to the CLT we would expect that each single mean of those 1000 means is already  approximately $\frac{1}{\lambda} = \frac{1}{0.2} = 5$. Since we now caluculate the mean of 1000 sampled means we expect the output to be very close to 5.
We will check if this is the case.
```{r}
set.seed(1234)
exp_sample_means <- NULL
for(i in 1:1000) {
exp_sample_means <- c(exp_sample_means, mean(rexp(40, 0.2)))
}
mean(exp_sample_means)
```
$\bar{x}$ in our case is `r round(mean(exp_sample_means), 2)` which is very close to the mean of the theoretical distribution namely $\mu = \frac{1}{0.2} = 5$.
## Comparison of the sample variance with the theoretical distribution
According to the CLT we would expect that the variance of the sample of the 1000 means is approximately $\frac{\frac{1}{0.2^{2}}}{40} = 0.625$.
```{r}
var(exp_sample_means)
```
$s^{2}$ in our case is `r round(var(exp_sample_means), 2)` which is close to the variance of the theoretical distribution we mentioned above.
## Showing that the sample distribution is approximately normal
In order to demonstrate that the sample distribution of the 1000 sampled means is approximately normal we will plot the correspondent histogram  and overlay it with the density function from the theoretical sampling distribution which is $N(\frac{1}{0.2}, \frac{\frac{1}{0.2}}{\sqrt{40}})$ distributed.
```{r fig.height=4, fig.width=4}
data <- as.data.frame(exp_sample_means)
ggplot(data, aes(x = exp_sample_means)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
```
## Conclusions
In this analysis we showed that the sampling distribution of the mean of an exponential distribution with $n = 40$ observations and $\lambda = 0.2$ is approximately $N(\frac{1}{0.2}, \frac{\frac{1}{0.2}}{\sqrt{40}})$ distributed.
---
title: "StatisticalInferenceProject2"
author: "Deepthi Murthy"
date: "July 25, 2015"
output: pdf_document
---
```
## Overiew
In this short report we are going to analyze the `TootGrowth` data of the R data sets package which describes the effect of vitamin C on tooth growth in guinea pigs
The `ToothGrowth` data set consists of 60 observations of 3 variables:
* `len`: Tooth length in millimeters (numeric variable)
* `supp`: Supplement type (factor variable with levels VC and OJ)
* `dose`: Dose in milligrams (numeric variable)
Even though `dose` is a numeric variable we will treat it as a factor in the subsequent analysis because only three dose levels of Vitamin C (0.5, 1, and  2 mg) were used.
In total, we deal with 60 unique guinea pigs. Each pig was assigned to a group which received a specific dose level of vitamin C. In addition, in each of those groups two different delivery methods (orange juice or ascorbic acid) were applied leaving 10 pigs per subgroup:
```{r echo=FALSE}
with(ToothGrowth, table(dose, supp))
```
## Exploratory data analysis
The average guinea pig tooth length is `r round(mean(ToothGrowth$len), 3)` with a standard deviation of `r round(sd(ToothGrowth$len), 3)`.
However, we are more interested in finding differences in tooth length across different groups of supplement types, dose levels and their respective combinations.
```{r echo=FALSE, fig.width=7, fig.height=2.5, fig.align='center'}
g_len_by_supp <- ggplot(ToothGrowth, aes(supp, len)) +
geom_boxplot() +
xlab('Supplement type') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by supplement type')
g_len_by_dose <- ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot() +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level')
grid.newpage()
# Push viewport to graphic device
pushViewport(viewport(layout = grid.layout(1, 2, widths = c(0.5, 0.5))))
print(g_len_by_supp, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(g_len_by_dose, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
```
The left box plot above reveals that guinea pigs which received their dose of vitamin C using orange juice have on average a greater tooth length than those pigs which got their dose using ascorbic acid. The orange juice group distribution is skewed to the left whereas the ascorbic acid group seems to be fairly symmetric.
Grouping by dose level (right hand side box plot) reveals even greater differences in tooth length and their respective means. The differences between the dose level groups are so big that not even the interquartile range boundaries overlap:
```{r echo = FALSE}
ToothGrowth %>% group_by(dose) %>%
summarize(
q25 = quantile(len, 0.25),
q75 = quantile(len, 0.75)
) %>%
as.data.frame
```
Both trends can be further observed when examining tooth length differences across both groups at the same time.
```{r echo=FALSE, fig.width=5, fig.height=3.5}
ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot(aes(fill = as.factor(dose))) +
facet_grid(. ~ supp) +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level and supplement type') +
scale_fill_manual(values = wes_palette("FantasticFox")) +
theme(legend.position = "none")
```
## Hypothesis tests
### Conditions
Since we dealing with subsets of n <= 30 our standard error estimate will generally not be accurate. Therefore, we will use the t distribution for our hypothesis tests and when constructing confidence intervals.
Based on the current information it is hard to check if the 2 necessary prerequisites for this setup are met:
1. Independence of the observations
2. Observations come from a nearly normal distribution.
However, we assume that the guinea pigs were randomly assigned to one of the groups (guarantees independence) and that they were sampled from a nearly normal population.
### Differences in supplement types
First, we will check if the observed difference in tooth length means between pigs who received their dose using orange juice and those who received their dose via ascorbic acid is statistically different from 0.
Our conservative choice will be a t-test with unequal variances of the two samples. The table below shows the results:
```{r echo=FALSE}
t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE)
tidy(t_diff_supp)
```
With a p-value of `r round(t_diff_supp$p.value, 3)` which is larger than the significance value, 0.05, we fail to reject the null hypothesis. The data does not provide strong evidence that the average difference in tooth length across the two supplement types is different from 0.
The hypothesis test result corresponds to the respective confidence interval `r round(t_diff_supp$conf.int[1:2], 3)` because it includes 0.
### Differences in dose levels
Since we are dealing with 3 different dose levels we need to apply 3 t-tests to cover all factor level combinations. Again, our null hypothesis in all cases is that the average difference in tooth length  is 0.
The table below summarizes the results of the three 3 pairwise comparisons.
Column `null_hypothesis` shows which null hypothesis was used for the respective t-test also indicating which sub group dose levels means were compared to each other.
```{r echo = FALSE}
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ1mg = 0'
) %>%
select(9, 1:8)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
```
In all three cases the p-value is smaller than the significance level 0.05 which means we reject the null hypothesis each time. The data provides strong evidence that the average tooth length of guinea pigs is different for each dose level.
Interpreting the first row of the table for illustriation:
We are 95% confident that the average tooth length of guinea pigs who received a 2mg dose of vitamin C is on average `r round(pairwise_results$conf.low[1], 2)` to `r round(pairwise_results$conf.high[1], 2)` millimeters higher than those who received a 1mg dose.
```{r eval=FALSE}
library(ggplot2)
library(dplyr)
library(broom)
library(wesanderson)
library(grid)
# Tables
with(ToothGrowth, table(dose, supp))
ToothGrowth %>% group_by(dose) %>%
summarize(
q25 = quantile(len, 0.25),
q75 = quantile(len, 0.75)
) %>%
as.data.frame
# Generate plots
g_len_by_supp <- ggplot(ToothGrowth, aes(supp, len)) +
geom_boxplot() +
xlab('Supplement type') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by supplement type')
g_len_by_dose <- ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot() +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level')
ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot(aes(fill = as.factor(dose))) +
facet_grid(. ~ supp) +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level and supplement type') +
scale_fill_manual(values = wes_palette("FantasticFox")) +
theme(legend.position = "none")
# T-test for difference in tooth length means across supplement types
t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE)
tidy(t_diff_supp)
# Pairwise t-tests for differences in tooth lengths means across dose levels
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ1mg = 0'
) %>%
select(9, 1:8)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
```
## Conclusions
There are clear indications that both the supplement as the dosage have clear indipendent effects on the length of teeth guinea pigs. More those means on avarage longer teeth. Supplement type has a clear influence too, but OJ has a greater avarage teethgrowth in combination with dosages 0.5 and 1 then for the VC supplement, while teeth length for the VC supplement vs the OJ in combiantion with dosage 2 has no significant effect (almost same mean & same confidence interval)
The fact remains however that these assumpionts are based on the facts:
* that the guinea pigs are repesentative for the population of guinea pigs,
* that dosage and supplement were randomly assigned and
* that the distribution of the means is normal.
g_len_by_supp <- ggplot(ToothGrowth, aes(supp, len)) +
geom_boxplot() +
xlab('Supplement type') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by supplement type')
g_len_by_dose <- ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot() +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level')
ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot(aes(fill = as.factor(dose))) +
facet_grid(. ~ supp) +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level and supplement type') +
scale_fill_manual(values = wes_palette("FantasticFox")) +
theme(legend.position = "none")
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ1mg = 0'
) %>%
select(9, 1:8)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot(aes(fill = as.factor(dose))) +
facet_grid(. ~ supp) +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level and supplement type') +
scale_fill_manual(values = wes_palette("FantasticFox")) +
theme(legend.position = "none")
t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE)
tidy(t_diff_supp)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ1mg = 0'
) %>%
select(9, 1:8)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
getwd()
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("lattice")
library (plyr)
library (lattice)
install.packages("plyr")
library (plyr)
library (lattice)
filename <- unzip("activity.zip")
activity <- read.csv(filename, stringsAsFactors = FALSE)
str(activity)
filename <- unzip("activity.zip")
activity <- read.csv(filename, stringsAsFactors = FALSE)
str(activity)
filename <- unzip("activity.csv")
acts <- read.csv ('activity.csv')
activity <- read.csv ('activity.csv')
spd <- ddply (activity,
.(date),
summarize,
stepSum=sum (steps, na.rm=TRUE))
spd <- ddply (activity,
.(date),
summarize,
stepSum=sum (steps, na.rm=TRUE))
activity <- read.csv('activity.csv', stringsAsFactors = FALSE)
str(activity)
activity$date <- as.Date(activity$date)
str(activity)
data <- read.csv("activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
averages[which.max(averages$steps),]
missing <- is.na(data$steps)
# How many missing
table(missing)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
data <- read.csv("activity.csv")
data <- read.csv("activity.csv")
```{r}
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="Total number of steps taken per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=100, xlab="Total number of steps taken per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
```{r}
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=10000, xlab="Total number of steps taken per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="Total number of steps taken per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute Interval") +
ylab("Average number of steps taken")
```{r}
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute Interval") +
ylab("Average number of steps taken")
averages[which.max(averages$steps),]
```{r how_many_missing}
missing <- is.na(data$steps)
# How many missing
table(missing)
```
missing <- is.na(data$steps)
# How many missing
table(missing)
table(missing)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="Total number of steps taken per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="Total number of steps taken per day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
![alt text](figures/Assignment Plot 1.png)
![Plot of chunk- Assignment Plot 1.png](figures/Assignment Plot 1.png)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute Interval") +
ylab("Average number of steps taken")
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="Total number of steps taken per day")
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
```
Now, let's make a panel plot containing plots of average number of steps taken
on weekdays and weekends.
```{r}
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
setwd("C:/Users/DMurthy/Rep data")
